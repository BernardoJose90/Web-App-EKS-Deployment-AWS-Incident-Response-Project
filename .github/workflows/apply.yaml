name: "Terraform Apply"

on:
  workflow_call:
    inputs:
      backend_file:
        required: true
        type: string
      tfvars_file:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      s3_bucket:
        required: true
        type: string
      kms_key_id:
        required: true
        type: string

jobs:
  apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}

    steps:
      # 1️⃣ Checkout code
      - name: "Checkout code"
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials via OIDC
      - name: "Configure AWS credentials using OIDC"
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::851725622142:role/GitHubActionsRole"
          aws-region: "eu-west-2"
          role-session-name: "github-actions"
          audience: "sts.amazonaws.com"

      # 2a️⃣ Debug: Verify AWS credentials
      - name: "Debug: Verify AWS credentials"
        run: |
          echo "Testing AWS credentials..."
          aws sts get-caller-identity || echo "Failed to assume role!"

      # 2b️⃣ Debug: Print environment info
      - name: "Debug: Print environment variables"
        run: |
          echo "Inputs:"
          echo "backend_file=${{ inputs.backend_file }}"
          echo "tfvars_file=${{ inputs.tfvars_file }}"
          echo "environment_name=${{ inputs.environment_name }}"
          echo "cluster_name=${{ inputs.cluster_name }}"
          echo "s3_bucket=${{ inputs.s3_bucket }}"
          echo "kms_key_id=${{ inputs.kms_key_id }}"

      # 3️⃣ Fetch AWS Account ID
      - name: "Get AWS Account ID"
        id: get_account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID"

      # 4️⃣ Terraform init
      - name: "Terraform Init"
        run: terraform init -backend-config="${{ inputs.backend_file }}"

      # 5️⃣ Terraform apply
      - name: "Terraform Apply"
        run: terraform apply -var-file="${{ inputs.tfvars_file }}" -auto-approve tfplan

      # 6️⃣ Generate kubeconfig
      - name: "Generate kubeconfig"
        run: |
          export KUBECONFIG="terraform/modules/eks/kubeconfig_${{ inputs.cluster_name }}.yaml"
          kubectl get nodes || echo "kubectl check failed!"

      # 7️⃣ Upload kubeconfig to S3 with KMS encryption
      - name: "Upload kubeconfig to S3"
        run: |
          echo "Uploading kubeconfig using KMS key: ${{ inputs.kms_key_id }}"
          aws s3 cp "terraform/modules/eks/kubeconfig_${{ inputs.cluster_name }}.yaml" \
            "s3://${{ inputs.s3_bucket }}/${{ inputs.environment_name }}/kubeconfig.yaml" \
            --sse aws:kms \
            --sse-kms-key-id "arn:aws:kms:eu-west-2:${{ env.AWS_ACCOUNT_ID }}:key/${{ inputs.kms_key_id }}"
