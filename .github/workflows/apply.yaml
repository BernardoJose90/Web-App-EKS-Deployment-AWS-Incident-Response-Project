name: "Terraform Apply"

on:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      environment_name:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      backend_file:
        required: true
        type: string
      tfvars_file:
        required: true
        type: string
      s3_bucket:
        required: true
        type: string
      kms_secret_name:
        required: true
        type: string

jobs:
  apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials via OIDC
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::851725622142:role/GitHubActionsRole"
          aws-region: ${{ inputs.region }}
          role-session-name: "github-actions-${{ github.sha }}"
          audience: "sts.amazonaws.com"

      # 3Ô∏è‚É£ Install jq for parsing JSON secrets
      - name: Install jq
        run: sudo apt-get install -y jq

      # 4Ô∏è‚É£ Fetch KMS Key from Secrets Manager
      - name: Fetch KMS Key from Secrets Manager
        id: get_kms
        run: |
          secret_json=$(aws secretsmanager get-secret-value \
            --secret-id "${{ inputs.kms_secret_name }}" \
            --query SecretString --output text)
          KMS_KEY_ARN=$(echo $secret_json | jq -r '.KMS_KEY_ARN')
          KMS_KEY_ID=$(echo $secret_json | jq -r '.KMS_KEY_ID')
          echo "KMS_KEY_ARN=$KMS_KEY_ARN" >> $GITHUB_ENV
          echo "KMS_KEY_ID=$KMS_KEY_ID" >> $GITHUB_ENV

      # 5Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      # 6Ô∏è‚É£ Terraform Init
      - name: Terraform Init
        working-directory: environments/prod
        run: terraform init -backend-config="${{ inputs.backend_file }}"

      # 7Ô∏è‚É£ Terraform Plan
      - name: Terraform Plan
        working-directory: environments/prod
        run: terraform plan -var-file="${{ inputs.tfvars_file }}" -out=tfplan -var="region=${{ inputs.region }}"

      # 8Ô∏è‚É£ Terraform Apply
      - name: Terraform Apply
        working-directory: environments/prod
        run: terraform apply -auto-approve tfplan

      # 9Ô∏è‚É£ Generate kubeconfig
      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ inputs.region }} \
            --name ${{ inputs.cluster_name }}
          kubectl get nodes || echo "kubectl check failed"

      # üîü Upload kubeconfig to S3 with KMS encryption
      - name: Upload kubeconfig to S3
        run: |
          kubectl config view --minify --flatten > kubeconfig_${{ inputs.cluster_name }}.yaml
          aws s3 cp kubeconfig_${{ inputs.cluster_name }}.yaml \
            "s3://${{ inputs.s3_bucket }}/${{ inputs.environment_name }}/kubeconfig.yaml" \
            --sse aws:kms \
            --sse-kms-key-id "${{ env.KMS_KEY_ARN }}"

      # 1Ô∏è‚É£1Ô∏è‚É£ Clean up local kubeconfig file
      - name: Clean up local kubeconfig file
        run: rm -f kubeconfig_${{ inputs.cluster_name }}.yaml       
